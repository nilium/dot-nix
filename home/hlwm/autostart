#!/usr/bin/env bash

# A mostly-default herbstluftwm autostart with some minor changes to key
# bindings, use of polybar as the panel, and rofi for application launching.

cd "$HOME/.config/herbstluftwm"

export PATH="$HOME/bin:$PATH"

# Background and foreground colors (affects polybar)
BG_COLOR='#090909'
FG_COLOR='#c0c0c0'

# this is a simple config for herbstluftwm

hc() {
    herbstclient "$@"
}

# have_bin cmd ...
# Returns successfully if all of the given commands (cmd) are available. This
# includes shell functions or any other means of seeing a command.
have_bin() {
    local cmd=
    for cmd; do
        command -v >/dev/null 2>&1 "$cmd" || return 1
    done
}

# in_session cmd ...
# Runs a command via pact whose lifetime is tied to the current herbstluftwm
# reload / session. If a reload occurs, herbstclient will exit and take the
# additional command(s) with it.
in_session() {
    pact herbstclient --wait '(quit_panel|reload)' '' "$@"
}

# Emit reload event.
hc emit_hook reload

# remove all existing keybindings
hc keyunbind --all

# keybindings
# if you have a super key you will be much happier with Mod set to Mod4
#Mod=Mod1    # Use alt as the main modifier
Mod=Mod4   # Use the super key as the main modifier

hc keybind $Mod-Shift-q quit
hc keybind $Mod-Shift-r reload
hc keybind $Mod-Shift-w close
hc keybind $Mod-Return spawn "${TERMINAL:-kitty}" # use your $TERMINAL with xterm as fallback

# Rofi (application launcher / window search).
hc keybind $Mod-r spawn rofi -modi run -show run
hc keybind $Mod-t spawn rofi -modi window -show window

# Lock screen
if have_bin loginctl; then
    hc keybind $Mod-Shift-grave spawn loginctl lock-session
fi

# basic movement in tiling and floating mode
# focusing clients
hc keybind $Mod-Left  focus left
hc keybind $Mod-Down  focus down
hc keybind $Mod-Up    focus up
hc keybind $Mod-Right focus right
hc keybind $Mod-h     focus left
hc keybind $Mod-j     focus down
hc keybind $Mod-k     focus up
hc keybind $Mod-l     focus right

# moving clients in tiling and floating mode
hc keybind $Mod-Shift-Left  shift left
hc keybind $Mod-Shift-Down  shift down
hc keybind $Mod-Shift-Up    shift up
hc keybind $Mod-Shift-Right shift right
hc keybind $Mod-Shift-h     shift left
hc keybind $Mod-Shift-j     shift down
hc keybind $Mod-Shift-k     shift up
hc keybind $Mod-Shift-l     shift right

# splitting frames
# create an empty frame at the specified direction
hc keybind $Mod-equal             split   auto    0.5
hc keybind $Mod-apostrophe        split   bottom  0.5
hc keybind $Mod-Shift-apostrophe  split   top     0.5
hc keybind $Mod-backslash         split   right   0.5
hc keybind $Mod-Shift-backslash   split   left    0.5
# let the current frame explode into subframes
hc keybind $Mod-Shift-e split explode
# Rotate frame.
hc keybind $Mod-y rotate
hc keybind $Mod-Shift-y chain , lock , rotate , rotate , rotate , unlock
hc keybind $Mod-Control-y mirror both

# resizing frames and floating clients
resizestep=0.02
hc keybind $Mod-Control-h       resize left +$resizestep
hc keybind $Mod-Control-j       resize down +$resizestep
hc keybind $Mod-Control-k       resize up +$resizestep
hc keybind $Mod-Control-l       resize right +$resizestep
hc keybind $Mod-Control-Left    resize left +$resizestep
hc keybind $Mod-Control-Down    resize down +$resizestep
hc keybind $Mod-Control-Up      resize up +$resizestep
hc keybind $Mod-Control-Right   resize right +$resizestep

# tags
tag_names=( {1..9} )
tag_keys=( {1..9} 0 )

hc rename default "${tag_names[0]}" || true
for i in "${!tag_names[@]}" ; do
    hc add "${tag_names[$i]}"
    key="${tag_keys[$i]}"
    if ! [ -z "$key" ] ; then
        hc keybind "$Mod-$key" spawn hlwm-use use_index "$i"
        hc keybind "$Mod-Shift-$key" move_index "$i"
        hc keybind "$Mod-Ctrl-$key" use_index "$i"
    fi
done

# cycle through tags
hc keybind $Mod-period use_index +1 --skip-visible
hc keybind $Mod-comma  use_index -1 --skip-visible

# layouting
hc keybind $Mod-minus remove
hc keybind $Mod-s floating toggle
hc keybind $Mod-f fullscreen toggle
hc keybind $Mod-Shift-f set_attr clients.focus.floating toggle
hc keybind $Mod-p pseudotile toggle
# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind $Mod-space                                                           \
            or , and . compare tags.focus.curframe_wcount = 2                   \
                     . cycle_layout +1 vertical horizontal max vertical grid    \
               , cycle_layout +1

# mouse
hc mouseunbind --all
hc mousebind $Mod-Button1 move
hc mousebind $Mod-Button2 zoom
hc mousebind $Mod-Button3 resize

# focus
hc keybind $Mod-BackSpace   cycle_monitor
hc keybind $Mod-Tab         cycle_all +1
hc keybind $Mod-Shift-Tab   cycle_all -1
hc keybind $Mod-c cycle
hc keybind $Mod-Shift-c cycle -1
hc keybind $Mod-i jumpto urgent

# tag locking
hc keybind $Mod-Shift-period lock_tag
hc keybind $Mod-Shift-comma  unlock_tag

# Media
if have_bin pactl; then
    hc keybind XF86AudioMute spawn pactl set-sink-mute @DEFAULT_SINK@ toggle
    hc keybind XF86AudioRaiseVolume spawn pactl set-sink-volume @DEFAULT_SINK@ +5%
    hc keybind XF86AudioLowerVolume spawn pactl set-sink-volume @DEFAULT_SINK@ -5%
fi

# theme
hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1
hc set frame_border_active_color '#565656'
hc set frame_border_normal_color '#101010'
hc set frame_bg_normal_color '#17181b'
hc set frame_bg_active_color '#27282b'
hc set frame_border_width 1
hc set always_show_frame on
hc set frame_bg_transparent off
hc set frame_transparent_width 1
hc set frame_gap 2
hc set hide_covered_windows off

hc attr theme.inner_width 2
hc attr theme.inner_color black
hc attr theme.border_width 2
hc attr theme.background_color "$BG_COLOR"
hc attr theme.title_color '#3D3D3D'
hc attr theme.title_height 20
hc attr theme.title_depth 4
hc attr theme.title_font 'PragmataPro:size=13'
hc attr theme.title_when always
hc attr theme.title_align center
hc attr theme.tab_outer_color '#333333'
hc attr theme.outer_width 2

hc attr theme.active.color '#FFCB00'
hc attr theme.active.inner_color '#101047'
hc attr theme.active.outer_color '#101014'
hc attr theme.active.title_color '#171200'

hc attr theme.normal.color '#A1A1A1'

hc attr theme.urgent.outer_color '#FFA800'

hc attr theme.floating.border_width 2
hc attr theme.floating.outer_width 2
hc attr theme.floating.outer_color black

hc set window_gap 2
hc set frame_padding 0
hc set gapless_grid off
hc set smart_window_surroundings off
hc set smart_frame_surroundings on
hc set mouse_recenter_gap 0

# rules
hc unrule -F
hc rule class~'[Gg]cr-prompter' floating=on floatplacement=center
hc rule focus=on # normally focus new clients
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' floating=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off

hc set tree_style '╾│ ├└╼─┐'

# unlock, just to be sure
hc unlock

# Set up monitors. This uses the md5sum of the current monitor layout to decide
# what to do, falling back to detect_monitors for unrecognized cases.
display_hash="$(
    ncrandr active |
    awk '($4 != ""){print $3}' |
    sort | md5sum | awk '{print $1}'
)"
case "$display_hash" in
e831af42b8182ca8702f0dc945b89b38)
    # Two screens, one portrait, one landscape. Split the portrait screen.
    hc set_monitors \
        2560x1440+1440+639 \
        1440x1024+0+0 \
        1440x1536+0+1024
    hc rename_monitor 0 front
    hc rename_monitor 1 upper
    hc rename_monitor 2 lower
    ;;
*)
    hc detect_monitors
    ;;
esac

# Start per-monitor polybar instances.
if have_bin polybar; then
    (
    export POLYBAR_BG="$BG_COLOR"
    export POLYBAR_FG="$FG_COLOR"
    for m in $(polybar -m | cut -d: -f1); do
        (
        cd "$HOME/.config/polybar"
        [[ -r ./conf ]] && . ./conf
        in_session env POLYBAR_MONITOR="$m" polybar -c "${POLYBAR_CONFIG:-config.ini}" "${POLYBAR_BAR:-main}" &
        )
    done
    )
fi

if have_bin blueman-applet; then
    in_session blueman-applet &
fi

# Set background.
if have_bin hsetroot; then
    hsetroot -solid "$BG_COLOR"
elif have_bin xsetroot; then
    xsetroot -solid "$BG_COLOR"
fi
# Set key bindings.
if have_bin xmodmap && [[ -r "$HOME/.Xmodmap" ]]; then
    xmodmap "$HOME/.Xmodmap"
fi
# Set key repeat.
if have_bin xset; then
    xset r rate 200 30
fi
